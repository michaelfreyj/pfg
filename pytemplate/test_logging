#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import os
from pathlib import Path
import time
import yaml

import methods
from test_methods import messages, more_messages


parser = methods.set_arguments()
now = time.localtime()
args = parser.parse_args()
logger, heading = methods.set_loggers(args)

date_string = f'Date: {now.tm_year}-{now.tm_mon}-{now.tm_mday}'
time_string = f'Time: {now.tm_hour}:{now.tm_min} {now.tm_zone}'

head = "{3:-^50}\n{0: ^50}\n{1: ^50}\n\n{2: ^50}\n{3:-^50}\n".format(
        date_string, time_string, 'Begin build log', '',
        )
heading.debug(head)

logger.debug(args)

if args.outfile == None:
    # outfile = input("enter the name for file to be created\n>> ")
    logger.debug('outfile=', args.outfile)
else:
    outfile = args.outfile

def check_custom_templates():
    home = Path.home()
    config_locations = [".config/pytemplate", ".local/pytemplate", ".pytemplate"]
    config_paths = []
    for conf in config_locations:
        config_paths.append(home.joinpath(conf, "templates"))

def check_builtin_templates():
    dummy =1

template_path = Path.home().joinpath("pytemplate/templates")
template_name = "sample"
template_file = template_path.joinpath(template_name)

yaml, template = methods.read_file(template_file)
substitutions, extension = methods.parse_yaml(yaml)
methods.query(substitutions)

template = methods.substitute(template, substitutions)

print(template)

    # return subs

# def substitute(defs):


# for key, value in subs.items():
#     if key == "extension":
#         pass
#     elif key == "required"
        
cwd = Path.cwd()

# template_file = cwd.joinpath(args.infile)
print(os.getcwd())

logger.debug(f'Logger level = {args.log_level}')
# 'application' code

# print()
# messages()
# print()
# more_messages()

