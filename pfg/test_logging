#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import os
from pathlib import Path
import sys
import time
import yaml

from file_utils import read_template, read_yaml, write_file
from input_utils import yes_or_no, choice
from sys_utils import set_arguments, set_loggers
from template_utils import check_templates, parse_yaml, query, substitute
from template import Template
from test_methods import messages, more_messages

__version__ = '0.0.1'

parser = set_arguments()
now = time.localtime()
args = parser.parse_args()
logger, heading = set_loggers(args)

date_string = f'Date: {now.tm_year}-{now.tm_mon}-{now.tm_mday}'
time_string = f'Time: {now.tm_hour}:{now.tm_min} {now.tm_zone}'
head = "{3:-^50}\n{0: ^50}\n{1: ^50}\n\n{2: ^50}\n{3:-^50}\n".format(
        date_string, time_string, 'Begin build log', '',
        )
heading.debug(head)

logger.debug(args)

if args.config:
    if logger.level > 20:
        logger.setLevel(logging.INFO)
    make_pfgrc()
    make_template_dir() 
    sys.exit(0)

if args.template == None:
    available_templates = check_templates()
    selected_template = choice(available_templates)
    # check templates in the future
    # template_path = Path.home().joinpath("pfg/templates")
    # template_name = "sample"
    # selected_template = template_path.joinpath(template_name)
else:
    if Path(args.template).is_absolute():
        selected_template = Path(args.template)
    else:
        selected_template = Path.cwd().joinpath(Path(args.template))



yaml, template = read_template(selected_template.path)
substitutions, extension = parse_yaml(yaml)

if args.outfile == None:
    outfile = input("enter the name for file (no extension) to be created\n>> ")
    outfile = Path.cwd().joinpath(outfile).with_suffix(extension)
else:
    outfile = Path(args.outfile).with_suffix(extension)
    if not outfile.is_absolute:
        outfile = Path.cwd().joinpath(outfile)
    else:
        pass

query(substitutions)

template = substitute(template, substitutions)

write_file(template, outfile)

if args.print_to_console == True:
    print(template)

# for key, value in subs.items():
#     if key == "extension":
#         pass
#     elif key == "required"
        
cwd = Path.cwd()

# selected_template = cwd.joinpath(args.infile)
print(os.getcwd())

logger.debug(f'Logger level = {args.log_level}')
# 'application' code

# print()
# messages()
# print()
# more_messages()

